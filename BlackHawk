local triggerbotEnabled = false

local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local StarterGui = game:GetService("StarterGui")
local camera = workspace.CurrentCamera

local lockedTarget = nil
local mb1Held = false
local aiming = false
local stepName = "MouseAimFOV"
local recoilTime = 0

local lastTriggerTime = 0
local hoverStartTime = nil
local hovering = false

local zoomed = false
local originalFOV = camera.FieldOfView

local function notify(text)
    StarterGui:SetCore("SendNotification", {
        Title = "Spectre";
        Text = text;
        Duration = 0.5;
    })
end

local function applyChams(model)
    if not model:FindFirstChild("Root") then return end
    if model:FindFirstChild("Chams") then return end
    local highlight = Instance.new("Highlight")
    highlight.Name = "Chams"
    highlight.Adornee = model
    highlight.FillColor = Settings.FillColor
    highlight.OutlineColor = Settings.OutlineColor
    highlight.FillTransparency = Settings.fillTransparency
    highlight.OutlineTransparency = Settings.outlineTransparency
    highlight.Parent = model
end

for _, model in ipairs(workspace:GetChildren()) do
    if model:IsA("Model") and model.Name == "Male" then
        applyChams(model)
    end
end

workspace.ChildAdded:Connect(function(child)
    if child:IsA("Model") and child.Name == "Male" then
        repeat task.wait() until child:FindFirstChild("Root")
        applyChams(child)
    end
end)

local fovCircle = Drawing.new("Circle")
fovCircle.Radius = Settings.FOV_RADIUS
fovCircle.Thickness = 2
fovCircle.Transparency = Settings.fovTransparency
fovCircle.Color = Settings.fovColor
fovCircle.Filled = false
fovCircle.Visible = true

RunService.RenderStepped:Connect(function()
    local size = camera.ViewportSize
    fovCircle.Position = Vector2.new(size.X / 2, size.Y / 2)
    fovCircle.Radius = Settings.FOV_RADIUS
end)

local function isValidTarget(part)
    if not (part and part.Parent and part:IsA("BasePart")) then return false end
    local screenPos, onScreen = camera:WorldToViewportPoint(part.Position)
    if not onScreen then return false end
    local screenCenter = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
    local dist = (Vector2.new(screenPos.X, screenPos.Y) - screenCenter).Magnitude
    if dist > Settings.FOV_RADIUS then return false end
    return true
end

local function canSee(part)
    if not Settings.aimbotWallCheck then return true end
    local origin = camera.CFrame.Position
    local direction = (part.Position - origin)
    local rayParams = RaycastParams.new()
    rayParams.FilterType = Enum.RaycastFilterType.Blacklist
    rayParams.FilterDescendantsInstances = {camera, part.Parent}
    local raycastResult = workspace:Raycast(origin, direction, rayParams)
    if raycastResult then
        return raycastResult.Instance:IsDescendantOf(part.Parent)
    end
    return true
end

local function getTargetPart()
    if lockedTarget and isValidTarget(lockedTarget) and canSee(lockedTarget) then
        return lockedTarget
    else
        lockedTarget = nil
    end
    local closestPart = nil
    local closestDist = math.huge
    local screenCenter = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
    for _, model in ipairs(workspace:GetChildren()) do
        if model:IsA("Model") then
            local root = model:FindFirstChild("Root")
            if root then
                for _, partName in ipairs(Settings.aimPartNames) do
                    local aimPart = model:FindFirstChild(partName)
                    if aimPart and aimPart:IsA("BasePart") and isValidTarget(aimPart) and canSee(aimPart) then
                        local screenPos, _ = camera:WorldToViewportPoint(aimPart.Position)
                        local dist = (Vector2.new(screenPos.X, screenPos.Y) - screenCenter).Magnitude
                        if dist < closestDist then
                            closestDist = dist
                            closestPart = aimPart
                        end
                    end
                end
            end
        end
    end
    lockedTarget = closestPart
    return lockedTarget
end

local function aimAtTarget(dt)
    if not Settings.aimbotEnabled or not aiming then return end
    local targetPart = getTargetPart()
    if not targetPart then return end
    local predictedPos = targetPart.Position
    local velocity = targetPart.AssemblyLinearVelocity or Vector3.new()
    if velocity.Magnitude > 0.05 then
        predictedPos += velocity * Settings.prediction
    end
    local screenPoint, onScreen = camera:WorldToViewportPoint(predictedPos)
    if not onScreen then return end
    local mousePos = UserInputService:GetMouseLocation()
    local dx = screenPoint.X - mousePos.X
    local dy = screenPoint.Y - mousePos.Y
    if mb1Held then
        recoilTime += dt
        local distance = (camera.CFrame.Position - targetPart.Position).Magnitude
        local distanceFactor = math.clamp(distance / Settings.referenceDistance, 1, 3)
        local effectiveRecoilSpeed = Settings.recoilSpeed * distanceFactor * Settings.smoothness
        local scaledMaxRecoil = math.clamp(Settings.maxRecoil * distanceFactor, Settings.maxRecoil, Settings.maxRecoil * 3)
        local recoilOffset = math.clamp(recoilTime * effectiveRecoilSpeed, 0, scaledMaxRecoil)
        dy += recoilOffset
    else
        recoilTime = 0
    end
    dx = math.clamp(dx, -100, 100)
    dy = math.clamp(dy, -100, 100)
    mousemoverel(dx * Settings.smoothness, dy * Settings.smoothness)
end

local function triggerBot()
    if not triggerbotEnabled then return end

    local now = tick()
    local mousePos = UserInputService:GetMouseLocation()
    local unitRay = camera:ViewportPointToRay(mousePos.X, mousePos.Y)
    local rayParams = RaycastParams.new()
    rayParams.FilterType = Enum.RaycastFilterType.Blacklist
    rayParams.FilterDescendantsInstances = {camera}
    local result = workspace:Raycast(unitRay.Origin, unitRay.Direction * 1000, rayParams)

    if result and result.Instance then
        local hitPartName = result.Instance.Name
        local canShoot = false
        for _, partName in ipairs(Settings.triggerPartNames) do
            if hitPartName == partName then
                canShoot = true
                break
            end
        end

        if canShoot then
            if not hovering then
                hovering = true
                hoverStartTime = now
            end

            if now - hoverStartTime >= Settings.triggerbotDelayBeforeShooting then
                if now - lastTriggerTime >= Settings.triggerbotDelayBetweenShots then
                    mouse1click()
                    lastTriggerTime = now
                end
            end
        else
            hovering = false
            hoverStartTime = nil
        end
    else
        hovering = false
        hoverStartTime = nil
    end
end

local function setZoom()
    if zoomed then
        camera.FieldOfView = originalFOV * Settings.ZoomAmplifier
    else
        camera.FieldOfView = originalFOV
    end
end

RunService.RenderStepped:Connect(function(dt)
    triggerBot()
    setZoom()
end)

camera:GetPropertyChangedSignal("FieldOfView"):Connect(function()
    if zoomed and camera.FieldOfView ~= originalFOV * Settings.ZoomAmplifier then
        setZoom()
    end
end)

UserInputService.InputBegan:Connect(function(input, gp)
    if not gp then
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            mb1Held = true
        elseif input.KeyCode == Settings.AimKey then
            aiming = not aiming
            notify("Aimbot: " .. (aiming and "ON" or "OFF"))
            if aiming then
                RunService:BindToRenderStep(stepName, Enum.RenderPriority.Input.Value + 1, aimAtTarget)
            else
                RunService:UnbindFromRenderStep(stepName)
                lockedTarget = nil
                mb1Held = false
                recoilTime = 0
            end
        elseif input.KeyCode == Settings.TriggerKey then
            triggerbotEnabled = not triggerbotEnabled
            notify("Triggerbot: " .. (triggerbotEnabled and "ON" or "OFF"))
        elseif input.KeyCode == Settings.ZoomKey then
            zoomed = not zoomed
            setZoom()
        end
    end
end)

UserInputService.InputEnded:Connect(function(input, gp)
    if not gp and input.UserInputType == Enum.UserInputType.MouseButton1 then
        mb1Held = false
    end
end)
