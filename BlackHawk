local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local camera = workspace.CurrentCamera

local lockedTarget = nil
local mb1Held = false
local recoilTime = 0

local function applyChams(model)
    if not model:FindFirstChild("Root") then return end
    if model:FindFirstChild("Chams") then return end
    local highlight = Instance.new("Highlight")
    highlight.Name = "Chams"
    highlight.Adornee = model
    highlight.FillColor = Settings.FillColor
    highlight.OutlineColor = Settings.OutlineColor
    highlight.FillTransparency = Settings.fillTransparency
    highlight.OutlineTransparency = Settings.outlineTransparency
    highlight.Parent = model
end

for _, model in ipairs(workspace:GetChildren()) do
    if model:IsA("Model") and model.Name == "Male" then
        applyChams(model)
    end
end

workspace.ChildAdded:Connect(function(child)
    if child:IsA("Model") and child.Name == "Male" then
        repeat task.wait() until child:FindFirstChild("Root")
        applyChams(child)
    end
end)

local fovCircle = Drawing.new("Circle")
fovCircle.Radius = Settings.FOV_RADIUS
fovCircle.Thickness = 2
fovCircle.Transparency = 1
fovCircle.Color = Color3.fromRGB(255, 255, 255)
fovCircle.Filled = false
fovCircle.Visible = true

RunService.RenderStepped:Connect(function()
    local size = camera.ViewportSize
    fovCircle.Position = Vector2.new(size.X / 2, size.Y / 2)
    fovCircle.Radius = Settings.FOV_RADIUS
end)

local function isValidTarget(part)
    if not (part and part.Parent and part:IsA("BasePart")) then return false end
    local screenPos, onScreen = camera:WorldToViewportPoint(part.Position)
    if not onScreen then return false end
    local screenCenter = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
    local dist = (Vector2.new(screenPos.X, screenPos.Y) - screenCenter).Magnitude
    if dist > Settings.FOV_RADIUS then return false end
    return true
end

local function getTargetPart()
    if lockedTarget and isValidTarget(lockedTarget) then
        return lockedTarget
    else
        lockedTarget = nil
    end
    local closestPart = nil
    local closestDist = math.huge
    local screenCenter = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
    for _, model in ipairs(workspace:GetChildren()) do
        if model:IsA("Model") then
            local root = model:FindFirstChild("Root")
            local aimPart = model:FindFirstChild(Settings.aimPartName)
            if root and aimPart and aimPart:IsA("BasePart") and isValidTarget(aimPart) then
                local screenPos, _ = camera:WorldToViewportPoint(aimPart.Position)
                local dist = (Vector2.new(screenPos.X, screenPos.Y) - screenCenter).Magnitude
                if dist < closestDist then
                    closestDist = dist
                    closestPart = aimPart
                end
            end
        end
    end
    lockedTarget = closestPart
    return lockedTarget
end

local function aimAtTarget(dt)
    local targetPart = getTargetPart()
    if not targetPart then return end

    local velocity = targetPart.AssemblyLinearVelocity or Vector3.new()
    local speed = velocity.Magnitude
    local predictedPos = targetPart.Position
    if speed > 0.05 then
        predictedPos = targetPart.Position + velocity * Settings.prediction
    end

    local screenPoint, onScreen = camera:WorldToViewportPoint(predictedPos)
    if not onScreen then return end

    local mousePos = UserInputService:GetMouseLocation()
    local dx = screenPoint.X - mousePos.X

    local recoilOffset = 0
    if mb1Held then
        recoilTime = recoilTime + dt
        local distance = (camera.CFrame.Position - targetPart.Position).Magnitude
        local distanceFactor = math.clamp(distance / Settings.referenceDistance, 1, 3)
        local effectiveRecoilSpeed = Settings.recoilSpeed * distanceFactor * Settings.smoothness
        local scaledMaxRecoil = math.clamp(Settings.maxRecoil * distanceFactor, Settings.maxRecoil, Settings.maxRecoil * 3)
        recoilOffset = math.clamp(recoilTime * effectiveRecoilSpeed, 0, scaledMaxRecoil)
    else
        recoilTime = 0
    end

    local dy = (screenPoint.Y - mousePos.Y) + recoilOffset
    mousemoverel(dx * Settings.smoothness, dy * Settings.smoothness)
end

UserInputService.InputBegan:Connect(function(input, gp)
    if not gp then
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            mb1Held = true
        elseif input.KeyCode == Settings.AimKey then
            Settings.aiming = not Settings.aiming
            if Settings.aiming then
                RunService:BindToRenderStep(Settings.stepName, Enum.RenderPriority.Input.Value + 1, aimAtTarget)
            else
                RunService:UnbindFromRenderStep(Settings.stepName)
                lockedTarget = nil
                mb1Held = false
                recoilTime = 0
            end
        end
    end
end)

UserInputService.InputEnded:Connect(function(input, gp)
    if not gp and input.UserInputType == Enum.UserInputType.MouseButton1 then
        mb1Held = false
        recoilTime = 0
    end
end)
