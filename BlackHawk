local triggerbotEnabled = false
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local StarterGui = game:GetService("StarterGui")
local camera = workspace.CurrentCamera
local worldModel = workspace.Camera.WorldModel

local lockedTarget = nil
local mb1Held = false
local aiming = false
local stepName = "MouseAimFOV"
local recoilTime = 0

local lastTriggerTime = 0
local hoverStartTime = nil
local hovering = false

local zoomed = false
local originalFOV = camera.FieldOfView

local originalProperties = {}
local playerChamsCache = {}

local function notify(text)
    StarterGui:SetCore("SendNotification", {
        Title = "Spectre";
        Text = text;
        Duration = 0.5;
    })
end

local function isPartVisible(part)
    local origin = camera.CFrame.Position
    local direction = part.Position - origin
    local rayParams = RaycastParams.new()
    rayParams.FilterType = Enum.RaycastFilterType.Blacklist
    rayParams.FilterDescendantsInstances = {camera, part.Parent}
    local rayResult = workspace:Raycast(origin, direction, rayParams)
    if rayResult then
        return rayResult.Instance:IsDescendantOf(part.Parent)
    else
        return true
    end
end

-- Updated visibility check for player chams: check any part visible
local function isModelVisible(model)
    for _, descendant in ipairs(model:GetDescendants()) do
        if descendant:IsA("BasePart") then
            if isPartVisible(descendant) then
                return true
            end
        end
    end
    return false
end

local function updatePlayerChams(model)
    if not model:FindFirstChild("Root") then return end

    local highlight = playerChamsCache[model]
    if not highlight then
        highlight = Instance.new("Highlight")
        highlight.Name = "Chams"
        highlight.Adornee = model
        highlight.Parent = model
        playerChamsCache[model] = highlight
    end

    local visible = isModelVisible(model)

    if visible then
        highlight.FillColor = getgenv().Settings.PlayerChamsVisibleColor
        highlight.OutlineColor = getgenv().Settings.PlayerChamsVisibleColor
    else
        highlight.FillColor = getgenv().Settings.PlayerChamsInvisibleColor
        highlight.OutlineColor = getgenv().Settings.PlayerChamsInvisibleColor
    end

    highlight.FillTransparency = getgenv().Settings.PlayerChamsFillTransparency
    highlight.OutlineTransparency = getgenv().Settings.PlayerChamsOutlineTransparency
end

local function isValidTarget(part)
    if not (part and part.Parent and part:IsA("BasePart")) then return false end
    local screenPos, onScreen = camera:WorldToViewportPoint(part.Position)
    if not onScreen then return false end
    local screenCenter = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
    local dist = (Vector2.new(screenPos.X, screenPos.Y) - screenCenter).Magnitude
    if dist > getgenv().Settings.FOV_RADIUS then return false end
    return true
end

local function canSee(part)
    if not getgenv().Settings.aimbotWallCheck then return true end
    local origin = camera.CFrame.Position
    local direction = (part.Position - origin)
    local rayParams = RaycastParams.new()
    rayParams.FilterType = Enum.RaycastFilterType.Blacklist
    rayParams.FilterDescendantsInstances = {camera, part.Parent}
    local raycastResult = workspace:Raycast(origin, direction, rayParams)
    if raycastResult then
        return raycastResult.Instance:IsDescendantOf(part.Parent)
    end
    return true
end

local function getTargetPart()
    if lockedTarget and isValidTarget(lockedTarget) and canSee(lockedTarget) then
        return lockedTarget
    else
        lockedTarget = nil
    end
    local closestPart = nil
    local closestDist = math.huge
    local screenCenter = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
    for _, model in ipairs(workspace:GetChildren()) do
        if model:IsA("Model") and model.Name == "Male" then -- only player models?
            local root = model:FindFirstChild("Root")
            if root then
                for _, partName in ipairs(getgenv().Settings.aimPartNames) do
                    local aimPart = model:FindFirstChild(partName)
                    if aimPart and aimPart:IsA("BasePart") and isValidTarget(aimPart) and canSee(aimPart) then
                        local screenPos, _ = camera:WorldToViewportPoint(aimPart.Position)
                        local dist = (Vector2.new(screenPos.X, screenPos.Y) - screenCenter).Magnitude
                        if dist < closestDist then
                            closestDist = dist
                            closestPart = aimPart
                        end
                    end
                end
            end
        end
    end
    lockedTarget = closestPart
    return lockedTarget
end

local function aimAtTarget(dt)
    if not getgenv().Settings.aimbotEnabled or not aiming then return end
    local targetPart = getTargetPart()
    if not targetPart then return end
    local predictedPos = targetPart.Position
    local velocity = targetPart.AssemblyLinearVelocity or Vector3.new()

    if velocity.Magnitude > 0.05 then
        predictedPos += velocity * getgenv().Settings.prediction
    end

    local screenPoint, onScreen = camera:WorldToViewportPoint(predictedPos)
    if not onScreen then return end
    local mousePos = UserInputService:GetMouseLocation()
    local dx = screenPoint.X - mousePos.X
    local dy = screenPoint.Y - mousePos.Y

    if mb1Held then
        recoilTime += dt

        local distance = (camera.CFrame.Position - targetPart.Position).Magnitude
        local distanceFactor = math.clamp(distance / getgenv().Settings.referenceDistance, 1, 3)

        local effectiveRecoilSpeed = getgenv().Settings.recoilSpeed * distanceFactor * getgenv().Settings.smoothness
        local maxAllowedRecoil = math.clamp(getgenv().Settings.maxRecoil * distanceFactor, getgenv().Settings.maxRecoil, getgenv().Settings.maxRecoil * 3)

        local recoilOffset = math.clamp(recoilTime * effectiveRecoilSpeed, 0, maxAllowedRecoil)

        dy += recoilOffset
    else
        recoilTime = 0
    end

    dx = math.clamp(dx, -100, 100)
    dy = math.clamp(dy, -100, 100)

    mousemoverel(dx * getgenv().Settings.smoothness, dy * getgenv().Settings.smoothness)
end

local function triggerBot()
    if not triggerbotEnabled then return end

    local now = tick()
    local mousePos = UserInputService:GetMouseLocation()
    local unitRay = camera:ViewportPointToRay(mousePos.X, mousePos.Y)
    local rayParams = RaycastParams.new()
    rayParams.FilterType = Enum.RaycastFilterType.Blacklist
    rayParams.FilterDescendantsInstances = {camera}
    local result = workspace:Raycast(unitRay.Origin, unitRay.Direction * 1000, rayParams)

    if result and result.Instance then
        local hitPartName = result.Instance.Name
        local canShoot = false
        for _, partName in ipairs(getgenv().Settings.triggerPartNames) do
            if hitPartName == partName then
                canShoot = true
                break
            end
        end

        if canShoot then
            if not hovering then
                hovering = true
                hoverStartTime = now
            end

            if now - hoverStartTime >= getgenv().Settings.triggerbotDelayBeforeShooting then
                if now - lastTriggerTime >= getgenv().Settings.triggerbotDelayBetweenShots then
                    mouse1click()
                    lastTriggerTime = now
                end
            end
        else
            hovering = false
            hoverStartTime = nil
        end
    else
        hovering = false
        hoverStartTime = nil
    end
end

local function setZoom()
    if zoomed then
        camera.FieldOfView = originalFOV * getgenv().Settings.ZoomAmplifier
    else
        camera.FieldOfView = originalFOV
    end
end

local fovCircle = Drawing.new("Circle")
fovCircle.Radius = getgenv().Settings.FOV_RADIUS
fovCircle.Thickness = 2
fovCircle.Transparency = getgenv().Settings.fovTransparency
fovCircle.Color = getgenv().Settings.fovColor
fovCircle.Filled = false
fovCircle.Visible = true

RunService.RenderStepped:Connect(function(dt)
    local size = camera.ViewportSize
    fovCircle.Position = Vector2.new(size.X / 2, size.Y / 2)
    fovCircle.Radius = getgenv().Settings.FOV_RADIUS

    triggerBot()
    setZoom()

    for _, model in ipairs(workspace:GetChildren()) do
        if model:IsA("Model") and model.Name == "Male" then
            updatePlayerChams(model)
        end
    end

    if getgenv().Settings.GunChamsEnabled then
        for _, part in ipairs(worldModel:GetDescendants()) do
            if part:IsA("MeshPart") then
                if not originalProperties[part] then
                    originalProperties[part] = {
                        Color = part.Color,
                        Material = part.Material,
                    }
                end
                if part.Color ~= getgenv().Settings.GunChamsColor or part.Material ~= getgenv().Settings.GunChamsMaterial then
                    part.Color = getgenv().Settings.GunChamsColor
                    part.Material = getgenv().Settings.GunChamsMaterial
                end
            end
        end
    else
        for part, props in pairs(originalProperties) do
            if part and part.Parent then
                part.Color = props.Color
                part.Material = props.Material
            end
        end
        originalProperties = {}
    end
end)

camera:GetPropertyChangedSignal("FieldOfView"):Connect(function()
    if zoomed and camera.FieldOfView ~= originalFOV * getgenv().Settings.ZoomAmplifier then
        setZoom()
    end
end)

UserInputService.InputBegan:Connect(function(input, gp)
    if not gp then
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            mb1Held = true
        elseif input.KeyCode == getgenv().Settings.AimKey then
            aiming = not aiming
            notify("Aimbot: " .. (aiming and "ON" or "OFF"))
            if aiming then
                RunService:BindToRenderStep(stepName, Enum.RenderPriority.Input.Value + 1, aimAtTarget)
            else
                RunService:UnbindFromRenderStep(stepName)
                lockedTarget = nil
                mb1Held = false
                recoilTime = 0
            end
        elseif input.KeyCode == getgenv().Settings.TriggerKey then
            triggerbotEnabled = not triggerbotEnabled
            notify("Triggerbot: " .. (triggerbotEnabled and "ON" or "OFF"))
        elseif input.KeyCode == getgenv().Settings.ZoomKey then
            zoomed = not zoomed
            setZoom()
        end
    end
end)

UserInputService.InputEnded:Connect(function(input, gp)
    if not gp and input.UserInputType == Enum.UserInputType.MouseButton1 then
        mb1Held = false
    end
end)
